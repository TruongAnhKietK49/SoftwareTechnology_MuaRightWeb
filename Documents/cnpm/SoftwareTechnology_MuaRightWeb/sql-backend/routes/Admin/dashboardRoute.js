const { getPool, closePool } = require("../config");
const express = require("express");
const router = express.Router();

const {
  getOrderProduct,
  getRevenue,
  getAccounts,
  getProducts,
  insertVoucher,
} = require("../../models/admin/m_dashboard");

router.get("/dashboard/statistics", async (req, res) => {
  try {
    const orderProduct = await getOrderProduct();
    const revenue = await getRevenue();
    const accounts = await getAccounts();
    const products = await getProducts();

    res.json({ orderProduct, revenue, accounts, products });
  } catch (err) {
    console.error("L·ªói khi l·∫•y d·ªØ li·ªáu dashboard:", err);
    res.status(500).json({ error: "L·ªói server khi l·∫•y d·ªØ li·ªáu dashboard" });
  }
});

// T·∫°o voucher
router.post("/dashboard/vouchers", async (req, res) => {
  try {
    const voucher = req.body;
    await insertVoucher(voucher);
    res.json({ message: "Voucher t·∫°o th√†nh cong" });
  } catch (err) {
    console.error("L·ªói khi t·∫°o voucher:", err);
    res.status(500).json({ error: "L·ªói server khi t·∫°o voucher" });
  }
});

// üßÆ L·∫•y doanh thu theo th√°ng (ch·ªâ t√≠nh ƒë∆°n ƒë√£ giao th√†nh c√¥ng)
router.get("/dashboard/revenue", async (req, res) => {
  try {
    const pool = await getPool();
    const result = await pool.request().query(`
      SELECT 
          YEAR(DeliveredAt) AS Year,
          MONTH(DeliveredAt) AS Month,
          SUM(TotalAmount) AS Revenue
      FROM OrderProduct
      WHERE State = 'Delivered'
      GROUP BY YEAR(DeliveredAt), MONTH(DeliveredAt)
      ORDER BY Year, Month
    `);

    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y doanh thu:", err);
    res.status(500).json({ error: "L·ªói m√°y ch·ªß khi l·∫•y d·ªØ li·ªáu doanh thu" });
  }
});

// üïì L·∫•y ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
router.get("/recent-activity", async (req, res) => {
  try {
    const query = `
      SELECT TOP 5 * FROM (
    -- üõí ƒê∆°n h√†ng m·ªõi
    SELECT 
      N'ƒê∆°n h√†ng m·ªõi #' + CAST(OrderId AS NVARCHAR(20)) AS Title,
      'bi bi-cart-check' AS Icon,
      'primary' AS Color,
      OrderDate AS Time
    FROM OrderProduct

    UNION ALL

    -- üë§ Ng∆∞·ªùi d√πng m·ªõi
    SELECT 
      N'Ng∆∞·ªùi d√πng m·ªõi: ' + Username AS Title,
      'bi bi-person-plus' AS Icon,
      'success' AS Color,
      CreatedAt AS Time
    FROM Account
    WHERE CreatedAt IS NOT NULL

    UNION ALL

    -- üëú S·∫£n ph·∫©m m·ªõi
    SELECT 
      N'S·∫£n ph·∫©m m·ªõi: ' + NameProduct AS Title,
      'bi bi-bag-check' AS Icon,
      'warning' AS Color,
      CreatedAt AS Time
    FROM Product
    WHERE CreatedAt IS NOT NULL

    UNION ALL

    -- ‚≠ê ƒê√°nh gi√°
    SELECT 
      N'ƒê√°nh gi√° ' + CAST(Rating AS NVARCHAR(5)) + N'‚≠ê cho s·∫£n ph·∫©m ID ' + CAST(ProductId AS NVARCHAR(20)) AS Title,
      'bi bi-star' AS Icon,
      'primary' AS Color,
      CreatedAt AS Time
    FROM Review

    UNION ALL

    -- üíµ Ho√†n ti·ªÅn ƒë∆°n h√†ng
    SELECT 
      N'Ho√†n ti·ªÅn ƒë∆°n h√†ng #' + CAST(OrderId AS NVARCHAR(20)) AS Title,
      'bi bi-currency-dollar' AS Icon,
      'danger' AS Color,
      UpdatedAt AS Time
    FROM OrderProduct
    WHERE State = 'Cancelled' AND UpdatedAt IS NOT NULL
) AS Activities
WHERE Time IS NOT NULL
ORDER BY Time DESC;

    `;

    const pool = await getPool();
    const result = await pool.query(query);
    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y:", err);
    res.status(500).json({ message: "Server error" });
  }
});

// üìä L·∫•y top s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
router.get("/top-products", async (req, res) => {
  try {
    const pool = await getPool();
    const result = await pool.request().query(`
      SELECT TOP 5
          p.ProductId,
          p.NameProduct,
          p.Category,
          p.ImageUrl,
          SUM(oi.Quantity) AS TotalSold,
          SUM(oi.LineTotal) AS Revenue
      FROM OrderItem oi
      JOIN Product p ON oi.ProductId = p.ProductId
      JOIN OrderProduct op ON oi.OrderId = op.OrderId
      WHERE op.State = 'Delivered'
      GROUP BY p.ProductId, p.NameProduct, p.Category, p.ImageUrl
      ORDER BY TotalSold DESC;
    `);
    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y top s·∫£n ph·∫©m:", err);
    res.status(500).json({ error: "L·ªói khi l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m b√°n ch·∫°y" });
  }
});

module.exports = router;
