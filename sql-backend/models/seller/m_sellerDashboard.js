const sql = require("mssql");
const { getPool } = require("../../routes/config");

/**
 * L·∫•y d·ªØ li·ªáu Dashboard cho Seller
 * @param {number} sellerId ID c·ªßa ng∆∞·ªùi b√°n
 * @returns {Promise<object>} D·ªØ li·ªáu th·ªëng k√™, ƒë∆°n h√†ng, top s·∫£n ph·∫©m
 */
async function getSellerDashboardData(sellerId) {
    try {
        const pool = await getPool();

        // 1. L·∫•y T√™n Seller
        const sellerInfo = await pool.request()
            .input('sellerId', sql.Int, sellerId)
            .query(`
                SELECT TOP 1 FullName
                FROM SellerProfile
                WHERE SellerId = @sellerId;
            `);
        const sellerName = sellerInfo.recordset[0] ? sellerInfo.recordset[0].FullName : 'Seller';

        // 2. L·∫•y Th·ªëng k√™ t·ªïng quan
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

        const statsResult = await pool.request()
            .input('sellerId', sql.Int, sellerId)
            .input('thirtyDaysAgo', sql.DateTime2, thirtyDaysAgo)
            .query(`
                -- Doanh thu v√† ƒê∆°n h√†ng trong 30 ng√†y qua
                SELECT 
                    ISNULL(SUM(OI.LineTotal), 0) AS MonthRevenue,
                    COUNT(DISTINCT O.OrderId) AS MonthOrders
                FROM OrderProduct O
                JOIN OrderItem OI ON O.OrderId = OI.OrderId
                WHERE OI.SellerId = @sellerId 
                    AND O.State IN ('Confirmed', 'Shipping', 'Delivered') 
                    AND O.OrderDate >= @thirtyDaysAgo;
                
                -- T·ªïng s·∫£n ph·∫©m ƒëang b√°n (s·ªë l∆∞·ª£ng > 0)
                SELECT COUNT(*) AS TotalProducts
                FROM Product
                WHERE SellerId = @sellerId AND Quantity > 0;

                -- ƒê∆°n h√†ng ch·ªù x·ª≠ l√Ω
                SELECT COUNT(DISTINCT O.OrderId) AS PendingOrders
                FROM OrderProduct O
                JOIN OrderItem OI ON O.OrderId = OI.OrderId
                WHERE OI.SellerId = @sellerId AND O.State = 'Pending';
            `);

        const monthlyStats = statsResult.recordsets[0][0];
        const totalProducts = statsResult.recordsets[1][0].TotalProducts;
        const pendingOrders = statsResult.recordsets[2][0].PendingOrders;

        // 3. ƒê∆°n h√†ng g·∫ßn ƒë√¢y (5 ƒë∆°n h√†ng m·ªõi nh·∫•t c·ªßa Seller)
        const recentOrdersResult = await pool.request()
            .input('sellerId', sql.Int, sellerId)
            .query(`
                SELECT TOP 5 
                    O.OrderId, 
                    O.OrderDate, 
                    O.State,
                    C.FullName AS CustomerName,
                    (
                        SELECT TOP 1 P.NameProduct + ' (x' + CAST(OI.Quantity AS NVARCHAR) + ')'
                        FROM OrderItem OI
                        JOIN Product P ON OI.ProductId = P.ProductId
                        WHERE OI.OrderId = O.OrderId AND OI.SellerId = @sellerId
                    ) AS TopItem,
                    (
                        SELECT SUM(OI.Quantity) 
                        FROM OrderItem OI
                        WHERE OI.OrderId = O.OrderId AND OI.SellerId = @sellerId
                    ) AS TotalQtyForSeller,
                    -- UPDATED: T√≠nh t·ªïng ti·ªÅn ch√≠nh x√°c cho seller trong ƒë∆°n h√†ng n√†y
                    (
                        SELECT SUM(OI_sub.LineTotal)
                        FROM OrderItem OI_sub
                        WHERE OI_sub.OrderId = O.OrderId AND OI_sub.SellerId = @sellerId
                    ) AS SellerTotalAmount
                FROM OrderProduct O
                JOIN CustomerProfile C ON O.CustomerId = C.CustomerId
                -- ƒê·∫£m b·∫£o ch·ªâ l·∫•y nh·ªØng ƒë∆°n h√†ng c√≥ s·∫£n ph·∫©m c·ªßa seller n√†y
                WHERE EXISTS (
                    SELECT 1 FROM OrderItem OI_filter 
                    WHERE OI_filter.OrderId = O.OrderId AND OI_filter.SellerId = @sellerId
                )
                ORDER BY O.OrderDate DESC;
            `);
        
        const recentOrders = recentOrdersResult.recordset.map(order => ({
            id: 'DH' + String(order.OrderId).padStart(3, '0'),
            product: order.TopItem || 'N/A',
            customer: order.CustomerName,
            qty: order.TotalQtyForSeller,
            total: order.SellerTotalAmount, // S·ª≠ d·ª•ng t·ªïng ti·ªÅn ƒë√£ ƒë∆∞·ª£c t√≠nh l·∫°i
            status: order.State.toLowerCase()
        }));

        // 4. Top 5 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
        const topProductsResult = await pool.request()
            .input('sellerId', sql.Int, sellerId)
            .query(`
                SELECT TOP 5
                    P.NameProduct,
                    SUM(OI.Quantity) AS TotalSold
                FROM OrderItem OI
                JOIN Product P ON OI.ProductId = P.ProductId
                WHERE OI.SellerId = @sellerId
                GROUP BY P.NameProduct
                ORDER BY TotalSold DESC;
            `);
        
        const topProducts = topProductsResult.recordset.map((item, index) => ({
            name: item.NameProduct,
            sold: item.TotalSold,
            badge: index === 0 ? 'ü•á Top 1' : index === 1 ? 'ü•à Top 2' : index === 2 ? 'ü•â Top 3' : `Top ${index + 1}`
        }));

        return {
            seller: {
                name: sellerName,
            },
            stats: {
                monthRevenue: monthlyStats.MonthRevenue,
                revenueTrend: 12.5, // D·ªØ li·ªáu gi·∫£, c·∫ßn logic ph·ª©c t·∫°p h∆°n
                monthOrders: monthlyStats.MonthOrders,
                ordersTrend: 8.2, // D·ªØ li·ªáu gi·∫£
                totalProducts: totalProducts,
                newProducts: 2, // D·ªØ li·ªáu gi·∫£
                pendingOrders: pendingOrders
            },
            recentOrders: recentOrders,
            topProducts: topProducts,
            notifications: [ // D·ªØ li·ªáu gi·∫£
                { type: 'warning', icon: 'exclamation-circle', title: 'ƒê∆°n h√†ng m·ªõi', message: `B·∫°n c√≥ ${pendingOrders} ƒë∆°n h√†ng m·ªõi c·∫ßn x√°c nh·∫≠n`, time: 'V√†i ph√∫t tr∆∞·ªõc' },
                { type: 'info', icon: 'box', title: 'S·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng', message: 'Ki·ªÉm tra kho h√†ng c·ªßa b·∫°n ngay', time: '1 gi·ªù tr∆∞·ªõc' },
                { type: 'success', icon: 'star', title: 'ƒê√°nh gi√° t√≠ch c·ª±c', message: 'S·∫£n ph·∫©m c·ªßa b·∫°n v·ª´a nh·∫≠n ƒë√°nh gi√° 5 sao', time: 'H√¥m qua' }
            ]
        };
    } catch (err) {
        console.error("SQL error in getSellerDashboardData:", err);
        throw new Error("L·ªói khi l·∫•y d·ªØ li·ªáu Seller Dashboard t·ª´ c∆° s·ªü d·ªØ li·ªáu.");
    }
}

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i OrderProduct sang Confirmed
 * @param {number} orderId ID c·ªßa ƒë∆°n h√†ng
 * @returns {Promise<boolean>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
async function confirmOrder(orderId) {
    try {
        const pool = await getPool();
        const result = await pool.request()
            .input('orderId', sql.Int, orderId)
            .input('newState', sql.NVarChar, 'Confirmed')
            .input('approvedAt', sql.DateTime2, new Date())
            .query(`
                UPDATE OrderProduct
                SET State = @newState, ApprovedAt = @approvedAt
                WHERE OrderId = @orderId AND State = 'Pending';
            `);
        
        return result.rowsAffected[0] > 0;
    } catch (err) {
        console.error("SQL error in confirmOrder:", err);
        throw new Error("L·ªói khi x√°c nh·∫≠n ƒë∆°n h√†ng trong c∆° s·ªü d·ªØ li·ªáu.");
    }
}

/**
 * L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ƒë∆°n h√†ng cho m·ªôt ng∆∞·ªùi b√°n c·ª• th·ªÉ
 * @param {number} orderId ID c·ªßa ƒë∆°n h√†ng
 * @param {number} sellerId ID c·ªßa ng∆∞·ªùi b√°n (ƒë·ªÉ ƒë·∫£m b·∫£o b·∫£o m·∫≠t)
 * @returns {Promise<object|null>} Chi ti·∫øt ƒë∆°n h√†ng ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
async function getSellerOrderDetails(orderId, sellerId) {
    try {
        const pool = await getPool();
        const result = await pool.request()
            .input('orderId', sql.Int, orderId)
            .input('sellerId', sql.Int, sellerId)
            .query(`
                -- 1. L·∫•y th√¥ng tin chung c·ªßa ƒë∆°n h√†ng v√† kh√°ch h√†ng
                SELECT 
                    O.OrderId,
                    O.OrderDate,
                    O.State,
                    O.ShippingAddress,
                    O.PaymentMethod,
                    C.FullName AS CustomerName,
                    C.PhoneNumber AS CustomerPhone,
                    C.Email AS CustomerEmail,
                    (SELECT SUM(LineTotal) FROM OrderItem WHERE OrderId = @orderId AND SellerId = @sellerId) AS SellerTotalAmount
                FROM OrderProduct O
                JOIN CustomerProfile C ON O.CustomerId = C.CustomerId
                WHERE O.OrderId = @orderId 
                  AND EXISTS (SELECT 1 FROM OrderItem WHERE OrderId = O.OrderId AND SellerId = @sellerId);

                -- 2. L·∫•y danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng thu·ªôc v·ªÅ ng∆∞·ªùi b√°n n√†y
                SELECT
                    P.NameProduct,
                    P.ImageURL,
                    OI.Quantity,
                    OI.Price,
                    OI.LineTotal
                FROM OrderItem OI
                JOIN Product P ON OI.ProductId = P.ProductId
                WHERE OI.OrderId = @orderId AND OI.SellerId = @sellerId;
            `);

        if (result.recordsets[0].length === 0) {
            return null; // Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c seller kh√¥ng s·ªü h·ªØu ƒë∆°n h√†ng n√†y
        }

        const orderDetails = result.recordsets[0][0];
        const productItems = result.recordsets[1];

        return {
            details: orderDetails,
            products: productItems
        };

    } catch (err) {
        console.error("SQL error in getSellerOrderDetails:", err);
        throw new Error("L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng t·ª´ c∆° s·ªü d·ªØ li·ªáu.");
    }
}

async function getSellerOrderDetails(orderId, sellerId) {
    try {
        const pool = await getPool();
        const result = await pool.request()
            .input('orderId', sql.Int, orderId)
            .input('sellerId', sql.Int, sellerId)
            .query(`
                -- Query 1: L·∫•y th√¥ng tin chung c·ªßa ƒë∆°n h√†ng v√† kh√°ch h√†ng
                SELECT 
                    O.OrderId,
                    O.OrderDate,
                    O.State,
                    O.ShipAddress, -- CORRECTED: D√πng ShipAddress thay v√¨ ShippingAddress
                    C.FullName AS CustomerName,
                    A.Phone AS CustomerPhone, -- CORRECTED: L·∫•y t·ª´ b·∫£ng Account
                    A.Email AS CustomerEmail, -- CORRECTED: L·∫•y t·ª´ b·∫£ng Account
                    (SELECT SUM(LineTotal) FROM OrderItem WHERE OrderId = @orderId AND SellerId = @sellerId) AS SellerTotalAmount
                FROM OrderProduct O
                JOIN CustomerProfile C ON O.CustomerId = C.CustomerId
                JOIN Account A ON C.CustomerId = A.AccountId -- ADDED JOIN: Th√™m join ƒë·∫øn b·∫£ng Account
                WHERE O.OrderId = @orderId 
                  AND EXISTS (SELECT 1 FROM OrderItem WHERE OrderId = O.OrderId AND SellerId = @sellerId);

                -- Query 2: L·∫•y danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng thu·ªôc v·ªÅ ng∆∞·ªùi b√°n n√†y
                SELECT
                    P.NameProduct,
                    P.ImageUrl, -- CORRECTED: D√πng ImageUrl (ch·ªØ 'u' th∆∞·ªùng)
                    OI.Quantity,
                    OI.UnitPrice, -- CORRECTED: D√πng UnitPrice thay v√¨ Price
                    OI.LineTotal
                FROM OrderItem OI
                JOIN Product P ON OI.ProductId = P.ProductId
                WHERE OI.OrderId = @orderId AND OI.SellerId = @sellerId;
            `);

        if (result.recordsets[0].length === 0) {
            return null; 
        }

        const orderDetails = result.recordsets[0][0];
        const productItems = result.recordsets[1];
        
        // Chuy·ªÉn ƒë·ªïi t√™n c·ªôt ƒë·ªÉ kh·ªõp v·ªõi nh·ªØng g√¨ frontend mong ƒë·ª£i
        const mappedProducts = productItems.map(p => ({
            NameProduct: p.NameProduct,
            ImageURL: p.ImageUrl, 
            Quantity: p.Quantity,
            Price: p.UnitPrice, 
            LineTotal: p.LineTotal
        }));

        orderDetails.ShippingAddress = orderDetails.ShipAddress;
        delete orderDetails.ShipAddress;


        return {
            details: orderDetails,
            products: mappedProducts
        };

    } catch (err) {
        console.error("SQL error in getSellerOrderDetails:", err);
        throw new Error("L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng t·ª´ c∆° s·ªü d·ªØ li·ªáu.");
    }
}


module.exports = {
    getSellerDashboardData,
    confirmOrder,
    getSellerOrderDetails
};