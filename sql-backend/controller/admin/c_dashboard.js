// Load d·ªØ li·ªáu th·ªëng k√™
// H√†m t·∫£i d·ªØ li·ªáu th·ªëng k√™ v√† hi·ªÉn th·ªã l√™n dashboard
async function loadingStatistics() {
  try {
    const res = await fetch("http://localhost:3000/admin/dashboard/statistics");
    if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªëng k√™");
    const data = await res.json();
    console.log("üìä D·ªØ li·ªáu th·ªëng k√™:", data);

    // G·ªçi h√†m hi·ªÉn th·ªã
    renderStatistics(data);
  } catch (error) {
    console.error("L·ªói khi t·∫£i th·ªëng k√™:", error);
  }
}

// H√†m hi·ªÉn th·ªã d·ªØ li·ªáu v√†o giao di·ªán
function renderStatistics(data) {
  const formatCurrency = (num) =>
    num.toLocaleString("vi-VN", { style: "currency", currency: "VND" });

  document.getElementById("totalOrders").textContent =
    data.orderProduct.length || 0;
  document.getElementById("totalRevenue").textContent = formatCurrency(
    data.revenue || 0
  );
  document.getElementById("totalUsers").textContent = data.accounts.length || 0;
  document.getElementById("totalProducts").textContent =
    data.products.length || 0;
}

// L·∫•y d·ªØ li·ªáu t·∫°o voucher
document
  .getElementById("createVoucherForm")
  .addEventListener("submit", async (e) => {
    e.preventDefault();

    const voucher = {
      Code: document.getElementById("voucherCode").value.trim(),
      CreatedByAdmin: document.getElementById("username").innerText,
      DiscountType: document.getElementById("discountType").value,
      DiscountVal: parseFloat(document.getElementById("discountVal").value),
      MinOrderAmt: parseFloat(document.getElementById("minOrderAmt").value),
      ValidFrom: document.getElementById("validFrom").value,
      ValidTo: document.getElementById("validTo").value,
    };
    console.log(voucher);

    try {
      const res = await fetch(
        "http://localhost:3000/admin/dashboard/vouchers",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(voucher),
        }
      );

      if (!res.ok) throw new Error("T·∫°o voucher th·∫•t b·∫°i");

      alert("üéâ Voucher ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
      e.target.reset();
    } catch (err) {
      console.error(err);
      alert("‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o voucher.");
    }
  });

// üìä T·∫£i d·ªØ li·ªáu v√† v·∫Ω bi·ªÉu ƒë·ªì doanh thu theo th√°ng
async function loadRevenueChart() {
  try {
    const res = await fetch("http://localhost:3000/admin/dashboard/revenue");
    const data = await res.json();

    // Chuy·ªÉn d·ªØ li·ªáu th√†nh m·∫£ng cho bi·ªÉu ƒë·ªì
    const labels = data.map((item) => `Th√°ng ${item.Month}/${item.Year}`);
    const revenues = data.map((item) => item.Revenue);

    // N·∫øu ƒë√£ c√≥ bi·ªÉu ƒë·ªì tr∆∞·ªõc ƒë√≥, h·ªßy tr∆∞·ªõc khi v·∫Ω m·ªõi
    if (
      window.revenueChart &&
      typeof window.revenueChart.destroy === "function"
    ) {
      window.revenueChart.destroy();
    }

    const ctx = document.getElementById("revenueChart").getContext("2d");
    window.revenueChart = new Chart(ctx, {
      type: "bar",
      data: {
        labels,
        datasets: [
          {
            label: "Doanh thu (VNƒê)",
            data: revenues,
            backgroundColor: "rgba(54, 162, 235, 0.6)",
            borderColor: "rgba(54, 162, 235, 1)",
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              callback: function (value) {
                return value.toLocaleString("vi-VN") + " ‚Ç´";
              },
            },
          },
        },
        plugins: {
          legend: { display: false },
          tooltip: {
            callbacks: {
              label: function (ctx) {
                return ctx.formattedValue + " ‚Ç´";
              },
            },
          },
        },
      },
    });
  } catch (err) {
    console.error("L·ªói khi t·∫£i bi·ªÉu ƒë·ªì doanh thu:", err);
  }
}

async function loadRecentActivities() {
  try {
    const res = await fetch("http://localhost:3000/admin/recent-activity");
    if (!res.ok) throw new Error("L·ªói t·∫£i ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y");
    const activities = await res.json();

    const container = document.querySelector(".activity-list");
    container.innerHTML = "";

    activities.forEach((act) => {
      const html = `
        <div class="activity-item">
          <div class="activity-icon ${act.Color}">
            <i class="${act.Icon}"></i>
          </div>
          <div class="activity-content">
            <div class="activity-title">${act.Title}</div>
            <div class="activity-time">${timeAgo(new Date(act.Time))}</div>
          </div>
        </div>
      `;
      container.insertAdjacentHTML("beforeend", html);
    });
  } catch (err) {
    console.error("‚ùå L·ªói load ho·∫°t ƒë·ªông:", err);
  }
}

// üïì H√†m hi·ªÉn th·ªã "x ph√∫t tr∆∞·ªõc"
function timeAgo(time) {
  const diff = Math.floor((Date.now() - time.getTime()) / 60000);
  if (diff < 1) return "V·ª´a xong";
  if (diff < 60) return `${diff} ph√∫t tr∆∞·ªõc`;
  const hours = Math.floor(diff / 60);
  if (hours < 24) return `${hours} gi·ªù tr∆∞·ªõc`;
  const days = Math.floor(hours / 24);
  return `${days} ng√†y tr∆∞·ªõc`;
}

async function loadTopProducts() {
  try {
    const res = await fetch("http://localhost:3000/admin/top-products");
    const data = await res.json();

    const tbody = document.querySelector("#topProductsTable");
    tbody.innerHTML = "";

    data.forEach((item) => {
      const tr = document.createElement("tr");
      tr.innerHTML = `
        <td>
        <div class="d-flex align-items-center">
          <img 
            src="${item.ImageUrl}" 
            alt="${item.NameProduct}" 
            class="product-img rounded me-3"
          >
          <div>
            <div class="fw-semibold">${item.NameProduct}</div>
            <small >${item.Category}</small>
          </div>
        </div>
      </td>
      <td class="text-center fw-semibold">${item.TotalSold}</td>
      <td class="text-end fw-semibold ">
        ${item.Revenue.toLocaleString("vi-VN")}‚Ç´
      </td>

      `;
      tbody.appendChild(tr);
    });
  } catch (err) {
    console.error("L·ªói khi t·∫£i top s·∫£n ph·∫©m:", err);
  }
}

// ===== Doanh thu theo Brand (Pie Chart) =====
async function loadRevenueByBrand() {
  try {
    const response = await fetch(
      "http://localhost:3000/admin/dashboard/revenue-pie-chart"
    );
    const data = await response.json();

    // Ki·ªÉm tra d·ªØ li·ªáu
    if (!data || data.length === 0) {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu doanh thu theo brand");
      const ctx = document.getElementById("pieChart").getContext("2d");
      ctx.font = "16px Arial";
      ctx.textAlign = "center";
      ctx.fillText(
        "Kh√¥ng c√≥ d·ªØ li·ªáu",
        ctx.canvas.width / 2,
        ctx.canvas.height / 2
      );
      return;
    }

    // Chu·∫©n b·ªã d·ªØ li·ªáu
    const brands = data.map((item) => item.Brand);
    const revenues = data.map((item) => item.Revenue);

    // L·∫•y ph·∫ßn t·ª≠ canvas v√† ƒë·∫∑t chi·ªÅu cao ƒë·ªìng b·ªô
    const canvas = document.getElementById("pieChart");
    canvas.height = 300; // chi·ªÅu cao c·ªë ƒë·ªãnh ƒë·ªÉ kh·ªõp v·ªõi lineChart
    const ctx = canvas.getContext("2d");

    // H·ªßy bi·ªÉu ƒë·ªì c≈© n·∫øu t·ªìn t·∫°i (tr√°nh b·ªã tr√πng l·∫∑p)
    if (window.pieChartInstance) {
      window.pieChartInstance.destroy();
    }

    // T·∫°o bi·ªÉu ƒë·ªì tr√≤n
    window.pieChartInstance = new Chart(ctx, {
      type: "pie",
      data: {
        labels: brands,
        datasets: [
          {
            label: "Doanh thu",
            data: revenues,
            backgroundColor: [
              "#4e73df",
              "#1cc88a",
              "#36b9cc",
              "#f6c23e",
              "#e74a3b",
              "#858796",
              "#2e59d9",
              "#17a673",
              "#6610f2",
              "#20c997",
            ],
            borderWidth: 1,
            hoverOffset: 12,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false, // r·∫•t quan tr·ªçng ƒë·ªÉ kh·ªõp chi·ªÅu cao container
        plugins: {
          legend: {
            position: "bottom",
            labels: { font: { size: 14 } },
          },
          tooltip: {
            callbacks: {
              label: (context) =>
                `${context.label}: ${context.formattedValue}‚Ç´`,
            },
          },
        },
      },
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫£i doanh thu theo brand:", error);
  }
}

// ===== Bi·ªÉu ƒë·ªì line Chart =====
let lineChartInstance; // üëà ƒë·ªÉ qu·∫£n l√Ω chart line

async function loadUserRegistrationChart() {
  try {
    const res = await fetch(
      "http://localhost:3000/admin/dashboard/user-registration-line"
    );
    const data = await res.json();
    console.log(data);

    if (!Array.isArray(data) || data.length === 0) {
      console.warn("Kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒëƒÉng k√Ω theo th√°ng.");
      return;
    }

    // Chu·∫©n b·ªã d·ªØ li·ªáu
    const months = data.map((item) => `Th√°ng ${item.Month}`);
    const totals = data.map((item) => item.TotalUsers);

    const ctx = document.getElementById("lineChart");

    // ‚úÖ H·ªßy chart c≈© n·∫øu c√≥
    if (lineChartInstance) {
      lineChartInstance.destroy();
    }

    // ‚úÖ T·∫°o chart m·ªõi
    lineChartInstance = new Chart(ctx, {
      type: "line",
      data: {
        labels: months,
        datasets: [
          {
            label: "Ng∆∞·ªùi d√πng ƒëƒÉng k√Ω",
            data: totals,
            borderWidth: 3,
            fill: true,
            tension: 0.3,
            pointBackgroundColor: "#f72585",
            borderColor: "#3a0ca3",
            backgroundColor: "rgba(67,97,238,0.15)",
          },
        ],
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            display: false,
          },
          title: {
            display: true,
            text: "Th·ªëng k√™ ng∆∞·ªùi d√πng ƒëƒÉng k√Ω theo th√°ng",
          },
        },
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              stepSize: 1,
            },
          },
        },
      },
    });
  } catch (err) {
    console.error("L·ªói khi t·∫£i bi·ªÉu ƒë·ªì ng∆∞·ªùi d√πng ƒëƒÉng k√Ω:", err);
  }
}

document.addEventListener(
  "DOMContentLoaded",
  () => loadingStatistics(),
  loadRevenueChart(),
  loadRecentActivities(),
  loadTopProducts(),
  loadRevenueByBrand(),
  loadUserRegistrationChart()
);
